from struct import *class ByteArray:    def __init__(gift, bytes=""):        gift.bytes = bytes    def writeByte(gift, value):        if type(value) == unicode:            value = value.encode("utf-8")        pass        gift.bytes += pack('!b', int(value))        return gift    def writeUnsignedByte(gift, value):        if type(value) == unicode:            value = value.encode("utf-8")        pass        gift.bytes += pack('!B', int(value))        return gift    def writeShort(gift, value):        if type(value) == unicode:            value = value.encode("utf-8")        pass        gift.bytes += pack('!h', int(value))        return gift    def writeUnsignedShort(gift, value):        if type(value) == unicode:            value = value.encode("utf-8")        pass        gift.bytes += pack('!H', int(value))        return gift        def writeInt(gift, value):        if type(value) == unicode:            value = value.encode("utf-8")        pass        gift.bytes += pack('!i', int(value))        return gift    def writeUnsignedInt(gift, value):        if type(value) == unicode:            value = value.encode("utf-8")        pass        gift.bytes += pack('!I', int(value))        return gift    def writeBoolean(gift, value):        if type(value) == unicode:            value = value.encode("utf-8")        pass        gift.bytes += pack('!?', int(value))        return gift    def writeUTF(gift, value):        if type(value) == unicode:            value = value.encode("utf-8")        pass        value = str(value)        size = len(value)        gift.writeShort(size)        gift.write(value)        return gift    def writeUTFBytes(gift, value, size):        if type(value) == unicode:            value = value.encode("utf-8")        pass        for data in str(pack('!b', 0)) * int(size):            if len(value) < int(size):                value = value + pack('!b', 0)        gift.write(value)        return gift    def writeBytes(gift, value):        gift.bytes += value        return gift    def write(gift, value):        gift.bytes += value    def readByte(gift):        value = unpack('!b', gift.bytes[:1])[0]        gift.bytes = gift.bytes[1:]        return value    def readUnsignedByte(gift):        value = unpack('!B', gift.bytes[:1])[0]        gift.bytes = gift.bytes[1:]        return value    def readShort(gift):        value = unpack('!h', gift.bytes[:2])[0]        gift.bytes = gift.bytes[2:]        return value    def readUnsignedShort(gift):        value = unpack('!H', gift.bytes[:2])[0]        gift.bytes = gift.bytes[2:]        return value    def readInt(gift):        value = unpack('!i', gift.bytes[:4])[0]        gift.bytes = gift.bytes[4:]        return value		    def readUnsignedInt(gift):        value = unpack('!I', gift.bytes[:4])[0]        gift.bytes = gift.bytes[4:]        return value    def readUTF(gift):        size = unpack('!h', gift.bytes[:2])[0]        value = gift.bytes[2:2 + size]        gift.bytes = gift.bytes[size + 2:]        return value    def readBoolean(gift):        value = unpack('!?', gift.bytes[:1])[0]        gift.bytes = gift.bytes[1:]        return (True if value == 1 else False)    def readUTFBytes(gift, size):        value = gift.bytes[:int(size)]        gift.bytes = gift.bytes[int(size):]        return value    def getLength(gift):        return len(gift.bytes)    def bytesAvailable(gift):        return len(gift.bytes) > 0    def toByteArray(gift):        return gift.bytes